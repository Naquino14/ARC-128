#pragma ohmygodwhydoesmathhavetobesohard
// Copyright 2022 Nathaniel Aquino, All rights reserved.
// ARC Sub Bytes and Mix Bytes Lookup Tables

namespace ARC
{
    internal class ARCLT
    {
        /// how this works:
        /// f(x) = outgoing[x]
        // for some reason this wont let me make it constant
        internal static readonly byte[] SBLTv1 = new byte[] // Sub Bytes Lookup Table v1  
        {
             0x1, 0x3, 0x7, 0xD, 0x15, 0x1F, 0x2B, 0x39, 0x49, 0x5B, 0x6F, 0x85, 0x9D, 0xB7, 0xD3, 0xF1, 0x12, 0x34, 0x58, 0x7E, 0xA6, 0xD0, 0xFC, 0x2B, 0x5B, 0x8D, 0xC1, 0xF7, 0x30, 0x6A, 0xA6, 0xE4, 0x25, 0x67, 0xAB, 0xF1, 0x3A, 0x84, 0xD0, 0x1F, 0x6F, 0xC1, 0x16, 0x6C, 0xC4, 0x1F, 0x7B, 0xD9, 0x3A, 0x9C, 0x1, 0x67, 0xCF, 0x3A, 0xA6, 0x15, 0x85, 0xF7, 0x6C, 0xE2, 0x5B, 0xD5, 0x52, 0xD0, 0x51, 0xD3, 0x58, 0xDE, 0x67, 0xF1, 0x7E, 0xD, 0x9D, 0x30, 0xC4, 0x5B, 0xF3, 0x8E, 0x2B, 0xC9, 0x6A, 0xD, 0xB1, 0x58, 0x1, 0xAB, 0x58, 0x7, 0xB7, 0x6A, 0x1F, 0xD5, 0x8E, 0x49, 0x6, 0xC4, 0x85, 0x48, 0xD, 0xD3, 0x9C, 0x67, 0x34, 0x3, 0xD3, 0xA6, 0x7B, 0x52, 0x2B, 0x6, 0xE2, 0xC1, 0xA2, 0x85, 0x6A, 0x51, 0x3A, 0x25, 0x12, 0x1, 0xF1, 0xE4, 0xD9, 0xD0, 0xC9, 0xC4, 0xC1, 0xC0, 0xC1, 0xC4, 0xC9, 0xD0, 0xD9, 0xE4, 0xF1, 0x1, 0x12, 0x25, 0x3A, 0x51, 0x6A, 0x85, 0xA2, 0xC1, 0xE2, 0x6, 0x2B, 0x52, 0x7B, 0xA6, 0xD3, 0x3, 0x34, 0x67, 0x9C, 0xD3, 0xD, 0x48, 0x85, 0xC4, 0x6, 0x49, 0x8E, 0xD5, 0x1F, 0x6A, 0xB7, 0x7, 0x58, 0xAB, 0x1, 0x58, 0xB1, 0xD, 0x6A, 0xC9, 0x2B, 0x8E, 0xF3, 0x5B, 0xC4, 0x30, 0x9D, 0xD, 0x7E, 0xF1, 0x67, 0xDE, 0x58, 0xD3, 0x51, 0xD0, 0x52, 0xD5, 0x5B, 0xE2, 0x6C, 0xF7, 0x85, 0x15, 0xA6, 0x3A, 0xCF, 0x67, 0x1, 0x9C, 0x3A, 0xD9, 0x7B, 0x1F, 0xC4, 0x6C, 0x16, 0xC1, 0x6F, 0x1F, 0xD0, 0x84, 0x3A, 0xF1, 0xAB, 0x67, 0x25, 0xE4, 0xA6, 0x6A, 0x30, 0xF7, 0xC1, 0x8D, 0x5B, 0x2B, 0xFC, 0xD0, 0xA6, 0x7E, 0x58, 0x34, 0x12, 0xF1, 0xD3, 0xB7, 0x9D, 0x85, 0x6F, 0x5B, 0x49, 0x39, 0x2B, 0x1F, 0x15, 0xD, 0x7, 0x3, 0x1, 0x1
        };

        internal static (string msg, byte[] table) GenerateSBLT() //  since this can be any mathematical operation, even random, it might help to make it a bit more complicated 
        {
            var output = "";
            var table = new byte[256];

            for (int i = 0; i <= 255; i++) // iterate over 255
            {
                table[i] = (byte)((Math.Pow(i, 2) + i + 1) % 255); // polynomial here lole
                output += $"0x{table[i].ToString("X")}, ";
            }

            return (output, table);
        }

        internal static readonly byte[] MBLTv1 = new byte[] // Mix Bytes Lookup Table v1
        {
            0x0
        };

        internal static (string msg, byte[] table) GenerateMBLT() // gen Mix Bytes Lookup Table
        {
            var output = "";
            var table = new byte[256];

            for (int i = 0; i <= 255; i++)
            {
                // TODO: generate mix bytes table
            }

            return (output, table);
        }

        /// <summary>
        /// Key Scheduking Lookup Table Version 1
        /// </summary>
        internal static readonly byte[] KSLTv1 = new byte[]
        {
            0x1, 0x3, 0x9, 0x1, 0xC1, 0x7, 0x77, 0xA0, 0xF7, 0xDA, 0x8E, 0x40, 0x5, 0xD9, 0xA3, 0x2F, 0x31, 0x46, 0xF2, 0xA3, 0xAC, 0x4A, 0xA0, 0xBB, 0x8F, 0xF7, 0xB8, 0x7D, 0xD9, 0x49, 0x2F, 0xD6, 0x73, 0x20, 0xDF, 0x9D, 0x2C, 0x46, 0x8E, 0x8F, 0xBB, 0x6D, 0xE6, 0x52, 0xC1, 0x2F, 0x7C, 0x73, 0xC5, 0xD, 0xCA, 0x68, 0x37, 0x70, 0x35, 0x8E, 0x6D, 0xAA, 0x7, 0x2B, 0xA7, 0xF4, 0x73, 0x6B, 0xD, 0x70, 0x95, 0x64, 0xAC, 0x26, 0x70, 0x13, 0x7D, 0x7, 0xEE, 0x5C, 0x5E, 0xEB, 0xE3, 0xD, 0x16, 0x95, 0xA, 0xD9, 0x53, 0xAC, 0x4, 0x5F, 0xAC, 0xC1, 0x5C, 0x22, 0xA0, 0x4D, 0x85, 0x8E, 0x95, 0xAF, 0xD9, 0xF8, 0xD9, 0x31, 0x9B, 0x9D, 0xA3, 0x2, 0xF4, 0xA0, 0x11, 0x3A, 0xF7, 0xE, 0x28, 0xD9, 0x9E, 0xD9, 0xD6, 0xC8, 0xCA, 0xDF, 0xF2, 0xD6, 0x46, 0xE3, 0x3A, 0xBB, 0xC2, 0x91, 0x52, 0x17, 0xD9, 0x7C, 0xC8, 0x70, 0xD, 0x20, 0x13, 0x37, 0xC5, 0xDF, 0x8E, 0xC2, 0x55, 0x7, 0x80, 0x52, 0xF4, 0xC8, 0x16, 0xD, 0xC5, 0x40, 0x64, 0x2, 0xD0, 0x70, 0x68, 0x28, 0x7, 0x44, 0x7, 0x5E, 0x41, 0x8E, 0xD, 0x6B, 0x40, 0xA, 0x2F, 0xFD, 0xAC, 0x59, 0xA, 0xAC, 0x17, 0x7, 0x22, 0xF5, 0xF7, 0x85, 0xE3, 0x40, 0xAF, 0x2F, 0xA3, 0xD9, 0x86, 0x46, 0x9D, 0xF8, 0xAC, 0xF4, 0xF5, 0xBB, 0x3A, 0x4D, 0xB8, 0x28, 0x2F, 0x49, 0xD9, 0x2C, 0x73, 0xCA, 0x35, 0x9D, 0xD6, 0x9B, 0x8E, 0x3A, 0x11, 0x6D, 0x91, 0xA7, 0xC1, 0xD9, 0xD1, 0x73, 0x70, 0x62, 0xCA, 0x13, 0x8C, 0x70, 0xDF, 0xE3, 0x6D, 0x55, 0x5C, 0x2B, 0x52, 0x4A, 0x73, 0x16, 0x62, 0x70, 0x40, 0xB9, 0xAC, 0xD0, 0xC5, 0x13, 0x28, 0x5C, 0xEE, 0x7, 0xB3, 0xEB, 0x8E, 0x62, 0x16, 0x40, 0x5F, 0xD9, 0xFD, 0x2
        };

        internal static (string msg, byte[] vs) GenerateKSLT()
        {
            var output = "";
            var table = new byte[256];

            for (int i = 0; i <= 255; i++)
            {
                // TODO: generate key schedule lookup table
                table[i] = (byte)(((Math.Pow(i, 4) * -1) + (Math.Pow(i, 3) * 3) + 1) % 255);
                output += $"0x{table[i].ToString("X")}, ";
            }

            return (output, table);
        }

        internal static void Permutate(ref byte[] io, in byte[] table, int seed =  1)
        {
            seed = (seed == 0) ? 1 : seed;
            for (int i = 0; i <= io.Length - 1; i++)
                io[i] = (byte)((io[i] * seed % 256) ^ table[i]);
        }
    }
}
