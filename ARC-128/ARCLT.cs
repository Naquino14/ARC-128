#pragma ohmygodwhydoesmathhavetobesohard
// Copyright 2022 Nathaniel Aquino, All rights reserved.
// ARC Sub Bytes and Mix Bytes Lookup Tables

namespace ARC
{
    internal class ARCLT
    {
        /// how this works:
        /// f(x) = outgoing[x]
        internal static readonly byte[] SBLTv1 = new byte[] // for some reason this wont let me make it constant
        {
             0x1, 0x3, 0x7, 0xD, 0x15, 0x1F, 0x2B, 0x39, 0x49, 0x5B, 0x6F, 0x85, 0x9D, 0xB7, 0xD3, 0xF1, 0x12, 0x34, 0x58, 0x7E, 0xA6, 0xD0, 0xFC, 0x2B, 0x5B, 0x8D, 0xC1, 0xF7, 0x30, 0x6A, 0xA6, 0xE4, 0x25, 0x67, 0xAB, 0xF1, 0x3A, 0x84, 0xD0, 0x1F, 0x6F, 0xC1, 0x16, 0x6C, 0xC4, 0x1F, 0x7B, 0xD9, 0x3A, 0x9C, 0x1, 0x67, 0xCF, 0x3A, 0xA6, 0x15, 0x85, 0xF7, 0x6C, 0xE2, 0x5B, 0xD5, 0x52, 0xD0, 0x51, 0xD3, 0x58, 0xDE, 0x67, 0xF1, 0x7E, 0xD, 0x9D, 0x30, 0xC4, 0x5B, 0xF3, 0x8E, 0x2B, 0xC9, 0x6A, 0xD, 0xB1, 0x58, 0x1, 0xAB, 0x58, 0x7, 0xB7, 0x6A, 0x1F, 0xD5, 0x8E, 0x49, 0x6, 0xC4, 0x85, 0x48, 0xD, 0xD3, 0x9C, 0x67, 0x34, 0x3, 0xD3, 0xA6, 0x7B, 0x52, 0x2B, 0x6, 0xE2, 0xC1, 0xA2, 0x85, 0x6A, 0x51, 0x3A, 0x25, 0x12, 0x1, 0xF1, 0xE4, 0xD9, 0xD0, 0xC9, 0xC4, 0xC1, 0xC0, 0xC1, 0xC4, 0xC9, 0xD0, 0xD9, 0xE4, 0xF1, 0x1, 0x12, 0x25, 0x3A, 0x51, 0x6A, 0x85, 0xA2, 0xC1, 0xE2, 0x6, 0x2B, 0x52, 0x7B, 0xA6, 0xD3, 0x3, 0x34, 0x67, 0x9C, 0xD3, 0xD, 0x48, 0x85, 0xC4, 0x6, 0x49, 0x8E, 0xD5, 0x1F, 0x6A, 0xB7, 0x7, 0x58, 0xAB, 0x1, 0x58, 0xB1, 0xD, 0x6A, 0xC9, 0x2B, 0x8E, 0xF3, 0x5B, 0xC4, 0x30, 0x9D, 0xD, 0x7E, 0xF1, 0x67, 0xDE, 0x58, 0xD3, 0x51, 0xD0, 0x52, 0xD5, 0x5B, 0xE2, 0x6C, 0xF7, 0x85, 0x15, 0xA6, 0x3A, 0xCF, 0x67, 0x1, 0x9C, 0x3A, 0xD9, 0x7B, 0x1F, 0xC4, 0x6C, 0x16, 0xC1, 0x6F, 0x1F, 0xD0, 0x84, 0x3A, 0xF1, 0xAB, 0x67, 0x25, 0xE4, 0xA6, 0x6A, 0x30, 0xF7, 0xC1, 0x8D, 0x5B, 0x2B, 0xFC, 0xD0, 0xA6, 0x7E, 0x58, 0x34, 0x12, 0xF1, 0xD3, 0xB7, 0x9D, 0x85, 0x6F, 0x5B, 0x49, 0x39, 0x2B, 0x1F, 0x15, 0xD, 0x7, 0x3, 0x1, 0x1
        };

        internal static (string msg, byte[] table) GenerateSBLT() //  since this can be any mathematical operation, even random, it might help to make it a bit more complicated 
        {
            var output = "";
            var table = new byte[256];

            for (int i = 0; i <= 255; i++) // iterate over 255
            {
                table[i] = (byte)((Math.Pow(i, 2) + i + 1) % 255); // polynomial here lole
                output += $"0x{table[i].ToString("X")}, ";
            }

            return (output, table);
        }

        internal static readonly byte[] MBLTv1 = new byte[]
        {
            0x0
        };

        internal static (string msg, byte[] table) GenerateMBLT()
        {
            var output = "";
            var table = new byte[256];

            for (int i = 0; i <= 255; i++)
            {
                // TODO: generate mix bytes table
            }

            return (output, table);
        }
    }
}
